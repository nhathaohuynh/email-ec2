# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: ['main']

jobs:
  build:
    runs-on: self-hosted

    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci # delete file package json and create new
      - run: npm run build
      - run: pm2 restart email
    # - run: npm run build --if-present
    # - run: npm test
# 1. Reverse Proxy Nginx
# ```bash
# sudo apt-get install -y nginx
# run ip, not wokring then htto open secirity
# cd /etc/nginx/sites-available

# sudo vim default

# location /api {
#  rewrite ^\/api\/(.*)$ /api/$1 break;
#  proxy_pass  http://localhost:3000;
#  proxy_set_header Host $host;
#  proxy_set_header X-Real-IP $remote_addr;
#  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
# }

# sudo systemctl restart nginx
# ```

# 2. Add domain to nginx configuration

# ```bash
# server_name shopdev.anonystick.com www.shopdev.anonystick.com;

# location / {
#     proxy_pass http://localhost:3000;
#     proxy_http_version 1.1;
#     proxy_set_header Upgrade $http_upgrade;
#     proxy_set_header Connection 'upgrade';
#     proxy_set_header Host $host;
#     proxy_cache_bypass $http_upgrade;
# }
# ```

# 3. add SSL to domain

# ```bash
# sudo add-apt-repository ppa:certbot/certbot
# sudo apt-get update
# sudo apt-get install python3-certbot-nginx
# sudo certbot --nginx -d shopdev.anonystick.com
# sudo certbot renew --dry-run
# sudo systemctl status certbot.timer
